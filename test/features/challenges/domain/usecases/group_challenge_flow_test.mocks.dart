// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_sdg/test/features/challenges/domain/usecases/group_challenge_flow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i16;

import 'package:fl_chart/fl_chart.dart' as _i17;
import 'package:flutter_sdg/features/challenges/domain/entities/address_entity.dart'
    as _i7;
import 'package:flutter_sdg/features/challenges/domain/entities/challenge_entity.dart'
    as _i5;
import 'package:flutter_sdg/features/challenges/domain/entities/challenge_progress_entity.dart'
    as _i9;
import 'package:flutter_sdg/features/challenges/domain/entities/group_challenge_progress_entity.dart'
    as _i11;
import 'package:flutter_sdg/features/challenges/domain/entities/task_progress_entity.dart'
    as _i10;
import 'package:flutter_sdg/features/challenges/domain/entities/trackable_task.dart'
    as _i6;
import 'package:flutter_sdg/features/challenges/domain/repositories/challenge_progress_repository.dart'
    as _i8;
import 'package:flutter_sdg/features/challenges/domain/repositories/challenge_repository.dart'
    as _i3;
import 'package:flutter_sdg/features/chat/domain/entities/chat_user_entity.dart'
    as _i21;
import 'package:flutter_sdg/features/chat/domain/entities/message_entity.dart'
    as _i19;
import 'package:flutter_sdg/features/chat/domain/repositories/chat_repository.dart'
    as _i2;
import 'package:flutter_sdg/features/chat/domain/usecases/get_chat_user_by_id_usecase.dart'
    as _i20;
import 'package:flutter_sdg/features/chat/domain/usecases/send_message_usecase.dart'
    as _i18;
import 'package:flutter_sdg/features/invites/domain/entities/invite_entity.dart'
    as _i13;
import 'package:flutter_sdg/features/invites/domain/repositories/invites_repository.dart'
    as _i12;
import 'package:flutter_sdg/features/profile/domain/entities/user_profile_entity.dart'
    as _i15;
import 'package:flutter_sdg/features/profile/domain/repositories/user_profile_repository.dart'
    as _i14;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChatRepository_0 extends _i1.SmartFake
    implements _i2.ChatRepository {
  _FakeChatRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChallengeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChallengeRepository extends _i1.Mock
    implements _i3.ChallengeRepository {
  MockChallengeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.ChallengeEntity>?> getAllChallengesStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllChallengesStream,
          [],
        ),
        returnValue: _i4.Stream<List<_i5.ChallengeEntity>?>.empty(),
      ) as _i4.Stream<List<_i5.ChallengeEntity>?>);

  @override
  _i4.Future<_i5.ChallengeEntity?> getChallengeById(String? challengeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChallengeById,
          [challengeId],
        ),
        returnValue: _i4.Future<_i5.ChallengeEntity?>.value(),
      ) as _i4.Future<_i5.ChallengeEntity?>);

  @override
  _i4.Future<String?> createChallenge({
    required String? title,
    required String? description,
    required List<String>? categories,
    required String? authorId,
    required List<_i6.TrackableTask>? tasks,
    Map<String, String>? llmFeedback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChallenge,
          [],
          {
            #title: title,
            #description: description,
            #categories: categories,
            #authorId: authorId,
            #tasks: tasks,
            #llmFeedback: llmFeedback,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getLlmFeedback({
    required String? step,
    required _i5.ChallengeEntity? challengeData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLlmFeedback,
          [],
          {
            #step: step,
            #challengeData: challengeData,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<List<_i7.AddressEntity>> searchLocation(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchLocation,
          [query],
        ),
        returnValue:
            _i4.Future<List<_i7.AddressEntity>>.value(<_i7.AddressEntity>[]),
      ) as _i4.Future<List<_i7.AddressEntity>>);
}

/// A class which mocks [ChallengeProgressRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChallengeProgressRepository extends _i1.Mock
    implements _i8.ChallengeProgressRepository {
  MockChallengeProgressRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i9.ChallengeProgressEntity?> watchChallengeProgress(
          String? progressId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchChallengeProgress,
          [progressId],
        ),
        returnValue: _i4.Stream<_i9.ChallengeProgressEntity?>.empty(),
      ) as _i4.Stream<_i9.ChallengeProgressEntity?>);

  @override
  _i4.Future<void> createChallengeProgress(
          _i9.ChallengeProgressEntity? progress) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChallengeProgress,
          [progress],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTaskState(
    String? progressId,
    String? taskIndex,
    _i10.TaskProgressEntity? newState,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskState,
          [
            progressId,
            taskIndex,
            newState,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> createGroupProgress(
          _i11.GroupChallengeProgressEntity? groupProgress) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGroupProgress,
          [groupProgress],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i11.GroupChallengeProgressEntity?> getGroupProgress(
          String? inviteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupProgress,
          [inviteId],
        ),
        returnValue: _i4.Future<_i11.GroupChallengeProgressEntity?>.value(),
      ) as _i4.Future<_i11.GroupChallengeProgressEntity?>);

  @override
  _i4.Future<void> addParticipantToGroupProgress({
    required String? inviteId,
    required String? userId,
    required int? tasksPerUser,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addParticipantToGroupProgress,
          [],
          {
            #inviteId: inviteId,
            #userId: userId,
            #tasksPerUser: tasksPerUser,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> incrementGroupProgress(String? inviteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementGroupProgress,
          [inviteId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markMilestoneAsAwarded(
    String? inviteId,
    int? milestone,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMilestoneAsAwarded,
          [
            inviteId,
            milestone,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<_i11.GroupChallengeProgressEntity>>
      watchGroupProgressByContextId(String? contextId) => (super.noSuchMethod(
            Invocation.method(
              #watchGroupProgressByContextId,
              [contextId],
            ),
            returnValue:
                _i4.Stream<List<_i11.GroupChallengeProgressEntity>>.empty(),
          ) as _i4.Stream<List<_i11.GroupChallengeProgressEntity>>);
}

/// A class which mocks [InvitesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInvitesRepository extends _i1.Mock implements _i12.InvitesRepository {
  MockInvitesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> createInvite(_i13.InviteEntity? invite) =>
      (super.noSuchMethod(
        Invocation.method(
          #createInvite,
          [invite],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateRecipientStatus({
    required String? inviteId,
    required String? recipientId,
    required _i13.InviteStatus? newStatus,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecipientStatus,
          [],
          {
            #inviteId: inviteId,
            #recipientId: recipientId,
            #newStatus: newStatus,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<_i13.InviteEntity>> getInvitesForContext(String? contextId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInvitesForContext,
          [contextId],
        ),
        returnValue: _i4.Stream<List<_i13.InviteEntity>>.empty(),
      ) as _i4.Stream<List<_i13.InviteEntity>>);

  @override
  _i4.Future<_i13.InviteEntity?> updateAndGetInvite({
    required String? inviteId,
    required String? recipientId,
    required _i13.InviteStatus? newStatus,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAndGetInvite,
          [],
          {
            #inviteId: inviteId,
            #recipientId: recipientId,
            #newStatus: newStatus,
          },
        ),
        returnValue: _i4.Future<_i13.InviteEntity?>.value(),
      ) as _i4.Future<_i13.InviteEntity?>);
}

/// A class which mocks [UserProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProfileRepository extends _i1.Mock
    implements _i14.UserProfileRepository {
  MockUserProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i15.UserProfileEntity?> getUserProfile(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [userId],
        ),
        returnValue: _i4.Future<_i15.UserProfileEntity?>.value(),
      ) as _i4.Future<_i15.UserProfileEntity?>);

  @override
  _i4.Stream<_i15.UserProfileEntity?> watchUserProfile(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchUserProfile,
          [userId],
        ),
        returnValue: _i4.Stream<_i15.UserProfileEntity?>.empty(),
      ) as _i4.Stream<_i15.UserProfileEntity?>);

  @override
  _i4.Future<bool> updateProfileData({
    required String? userId,
    required String? name,
    required int? age,
    required String? studyField,
    required String? school,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfileData,
          [],
          {
            #userId: userId,
            #name: name,
            #age: age,
            #studyField: studyField,
            #school: school,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<String?> uploadAndUpdateProfileImage({
    required String? userId,
    required _i16.File? imageFile,
    String? oldImageUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadAndUpdateProfileImage,
          [],
          {
            #userId: userId,
            #imageFile: imageFile,
            #oldImageUrl: oldImageUrl,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Stream<List<_i17.PieChartSectionData>?> getProfileStatsPieChartStream(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfileStatsPieChartStream,
          [userId],
        ),
        returnValue: _i4.Stream<List<_i17.PieChartSectionData>?>.empty(),
      ) as _i4.Stream<List<_i17.PieChartSectionData>?>);

  @override
  _i4.Future<bool> addTaskToOngoing(
    String? userId,
    String? challengeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTaskToOngoing,
          [
            userId,
            challengeId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> removeTaskFromOngoing(
    String? userId,
    String? challengeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTaskFromOngoing,
          [
            userId,
            challengeId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> markTaskAsCompleted({
    required String? userId,
    required String? challengeId,
    required int? pointsEarned,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markTaskAsCompleted,
          [],
          {
            #userId: userId,
            #challengeId: challengeId,
            #pointsEarned: pointsEarned,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> addBonusPoints({
    required List<String>? userIds,
    required int? points,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBonusPoints,
          [],
          {
            #userIds: userIds,
            #points: points,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [SendMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendMessageUseCase extends _i1.Mock
    implements _i18.SendMessageUseCase {
  MockSendMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i4.Future<void> call({
    required _i19.MessageEntity? message,
    required String? contextId,
    required bool? isGroupMessage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #message: message,
            #contextId: contextId,
            #isGroupMessage: isGroupMessage,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [GetChatUserByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetChatUserByIdUseCase extends _i1.Mock
    implements _i20.GetChatUserByIdUseCase {
  MockGetChatUserByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i4.Future<_i21.ChatUserEntity?> call({required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#userId: userId},
        ),
        returnValue: _i4.Future<_i21.ChatUserEntity?>.value(),
      ) as _i4.Future<_i21.ChatUserEntity?>);
}
